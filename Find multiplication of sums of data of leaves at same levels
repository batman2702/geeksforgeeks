#include<bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    node *left,*right;
};
node *newNode(int data)
{
    node *temp=new node;
    temp->data=data;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
}
bool isleaf(node *root)
{
    return (root->left==NULL && root->right==NULL);
}
int multiply(node *root)
{
    if(root==NULL)
    return 0;
    int mul=1;
    std::queue<node*>q ;
    //nodecount=q.size();
    q.push(root);
    while(1)
    {
        int nodecount=q.size();
        if(nodecount==0)
        break;
        int levelsum=0;
        bool leafnode=false;
        while(nodecount>0)
        {
            node *temp=q.front();
            //q.pop();
            if(isleaf(temp))
            {
                levelsum+=temp->data;
                leafnode=true;
            }
            q.pop();
            if(temp->left!=NULL)
            q.push(temp->left);
            if(temp->right!=NULL)
            q.push(temp->right);
           // q.pop();
            nodecount--;
        }
        if(leafnode)
        mul*=levelsum;
    }
    return mul;
}
int main()
{
    node *root=newNode(2);
    root->left = newNode(7);
    root->right = newNode(5);
    root->left->right = newNode(6);
    root->left->left = newNode(8);
    root->left->right->left = newNode(1);
    root->left->right->right = newNode(11);
    root->right->right = newNode(9);
    root->right->right->left = newNode(4);
    root->right->right->right = newNode(10);
    cout<<multiply(root)<<endl;
}
